// Using OLIMEX_ESP8266_EVB board
// You need to modify the WLAN_SSID, WLAN_PASS settings below 
// to match your network settings 

/* Code generated by pfodDesigner V1.2.741
 * (c)2014-2015 Forward Computing and Control Pty. Ltd.
 * NSW Australia, www.forward.com.au
 * This generated code may be freely used for both private and commerical use
 */

/* Modified for ESP-01 and Pin 2 output.*/

#include <ESP8266WiFi.h>
// Download library from http://www.forward.com.au/pfod/pfodParserLibraries/index.html
#include <EEPROM.h>
#include <pfodSecurity.h>
pfodSecurity parser; // create a parser to handle the pfod messages


#define WLAN_SSID       "myNetwork"        // cannot be longer than 32 characters!
#define WLAN_PASS       "myPassword"

const int portNo = 4989; // What TCP port to listen on for connections.

// add you 32 char Hex pfod Password here for 128bit security
// eg "173057F7A706AF9BBE65D51122A14CEE" but generate your own key, "" means no pfod password
#define pfodSecurityCode ""
// see http://www.forward.com.au/pfod/ArduinoWiFi_simple_pfodDevice/index.html for more information and an example
// and QR image key generator.

WiFiServer server(portNo);
WiFiClient client;
boolean alreadyConnected = false; // whether or not the client was connected previously

// give the board pins names, if you change the pin number here you will change the pin controlled
int cmd_A_var; // name the variable for 'Relay is '
const int cmd_A_pin = 2; // name the output pin for 'Relay is '
unsigned long startTimeInMills = 0; 
// the time when we started the relay pulse
bool pulseTimerRunning = false; // set to true when we have a timer running
unsigned long pulseLength = 750; // 0.75sec keep all timing in unsigned long


// the setup routine runs once on reset:
void setup() {
  EEPROM.begin(512);  // only use 20bytes for pfodSecurity but reserve 512 (pfodWifiConfig uses more)
  cmd_A_var = 0;
  //pinMode(cmd_A_pin, INPUT_PULLUP); 
  pinMode(cmd_A_pin, OUTPUT); // output for 'Relay is ' is initially LOW,
  //uncomment INPUT_PULLUP line above and set variable to 1, if you want it initially HIGH
  digitalWrite(cmd_A_pin,cmd_A_var); // set output
   Serial.begin(115200);
  for (int i=10;i>0;i--) {
    Serial.print(i);
    Serial.print(' ');
    delay(500);
  }
  Serial.println();
  /* Initialise wifi module */
  WiFi.begin(WLAN_SSID, WLAN_PASS);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println();
  Serial.println("WiFi connected");
  
  // Start the server
  server.begin();
  Serial.println("Server started");
  
  // Print the IP address
  Serial.println(WiFi.localIP());
  
  // start listening for clients
  client = server.available(); // evaluates to false if no connection

  // <<<<<<<<< Your extra setup code goes here
}

// the loop routine runs over and over again forever:
void loop() {
  if (!client) { // see if a client is available
    client = server.available(); // evaluates to false if no connection
  } else {
    // have client
    if (!client.connected()) {
      if (alreadyConnected) {
      // client closed so clean up
      closeConnection(parser.getPfodAppStream());
      }
    } else {
      // have connected client
      if (!alreadyConnected) {
      parser.connect(&client,F(pfodSecurityCode)); // sets new io stream to read from and write to
      EEPROM.commit(); // does nothing if nothing to do
      alreadyConnected = true;
      }

      byte cmd = parser.parse(); // pass it to the parser
      // parser returns non-zero when a pfod command is fully parsed
      if (cmd != 0) { // have parsed a complete msg { to }
        byte* pfodFirstArg = parser.getFirstArg(); // may point to \0 if no arguments in this msg.
        long pfodLongRtn; // used for parsing long return arguments, if any
        if ('.' == cmd) {
          // pfodApp has connected and sent {.} , it is asking for the main menu
          // send back the menu designed
          sendMainMenu();

        // now handle commands returned from button/sliders
        } else if (cmd == ((byte)'o')) {
          startRelayPulse();
          sendMainMenuUpdate(); // always send back a pfod msg otherwise pfodApp will disconnect.

        } else if ('!' == cmd) {
          // CloseConnection command
          closeConnection(parser.getPfodAppStream());
        } else {
          // unknown command
          parser.print(F("{}")); // always send back a pfod msg otherwise pfodApp will disconnect.                  
        }
       //cmd = 0; // have processed this cmd now  
      }
    }
    controlRelay();
  }
  yield();
}

// this is called on receiving
// a command to open/close
// sets up time and turns relay on
void startRelayPulse() {
  startTimeInMills = millis();
  pulseTimerRunning = true;
  // make pin high
  digitalWrite(cmd_A_pin,HIGH);   
  Serial.println("Start pulse");
}

// this is called each loop
// turns relay off once time
// exceeds stopTime
void controlRelay() {
  // else
  if (pulseTimerRunning && ((millis() - startTimeInMills) > pulseLength)) { 
    pulseTimerRunning = false; // timer finished
    // make pin low
    digitalWrite(cmd_A_pin,LOW);   
    Serial.println("End pulse");
  }
}
void closeConnection(Stream *io) {
  // add any special code here to force connection to be dropped
  parser.closeConnection(); // nulls io stream
  alreadyConnected = false;
  if (!client) {
    return;
  } // else
  client.stop();
  client = server.available(); // evaluates to false if no connection
}

void sendMainMenu() {
  parser.print(F("{."));  // start a Menu screen pfod message
  send_menuContents(); // send the menu contents for ESP8266 OLIMEX
  parser.print(F("}"));  // close pfod message
}

void sendMainMenuUpdate() {
  parser.print(F("{:"));  // start an Update Menu pfod message
  send_menuContents(); // send the menu contents for ESP8266 OLIMEX
  parser.print(F("}"));  // close pfod message
}

// modify this method if you need to update the menu to reflect state changes
void send_menuContents() {
    // send menu prompt
    parser.print("Press to open/close garage door|||||o~Open/Close");
 
  // ============ end of menu item ===========
}

// ============= end generated code =========
